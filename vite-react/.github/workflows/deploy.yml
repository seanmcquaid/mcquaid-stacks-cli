name: Deploy
on:
  push:
    branches:
      - develop
      - qa
      - staging
      - prod

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest
        uses: actions/checkout@v3
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.2
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
      - name: Create .env file
        run: |
          touch .env
          echo "VITE_APP_VERSION=$npm_package_version" >> .env
      - name: Set env to dev
        if: endsWith(github.ref, '/develop')
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "VITE_APP_ENVIRONMENT=dev" >> .env
      - name: Set env to qa
        if: endsWith(github.ref, '/qa')
        run: |
          echo "ENVIRONMENT=qa" >> $GITHUB_ENV
          echo "VITE_APP_ENVIRONMENT=qa" >> .env
      - name: Set env to staging
        if: endsWith(github.ref, '/staging')
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "VITE_APP_ENVIRONMENT=staging" >> .env
      - name: Set env to prod
        if: endsWith(github.ref, '/prod')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "VITE_APP_ENVIRONMENT=prod" >> .env
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build the app
        run: pnpm build
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy Cloudformation
        id: deploy-cfn
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ secrets.AWS_CLOUDFORMATION_STACK_NAME }}-${{ env.ENVIRONMENT }}
          template: aws/cloudformation.yaml
          no-fail-on-empty-changeset: '1'
          parameter-overrides: >-
            HostedZoneId=${{ secrets.AWS_HOSTED_ZONE_ID }},
            CertificateArn=${{ secrets.AWS_CERTIFICATE_ARN }},
            Env=${{ env.ENVIRONMENT }}
      - name: Deploy App to S3 + CloudFront
        run: |
          echo "Clearing bucket..."
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --recursive
          echo "Syncing app to bucket..."
          aws s3 sync ./dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}-${{ env.ENVIRONMENT }} --cache-control max-age=31536000
      - name: Invalidate CloudFront Distribution Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ steps.deploy-cfn.outputs.CFDistribution }} --paths "/*"
