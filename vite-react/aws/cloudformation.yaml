AWSTemplateFormatVersion: 2010-09-09
Description: S3 / Route53 / CloudFront / WAF CloudFormation configuration
Parameters:
  Env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - staging
      - prod
    Description: 'Define the environment to deploy. Accepted values are "dev", "qa", "staging" and "prod"'
  HostedZoneId:
    Type: String
    Default: hosted-zone-id
    Description: 'Hosted Zone ID for DNS'
  CertificateArn:
    Type: String
    Default: certificate-arn
    Description: 'ARN Certificate for Domain'
Mappings:
  EnvironmentMaps:
    dev:
      'CloudFrontPriceClass': PriceClass_100
      'Domain': sean-react-template-dev.mcquaid-apps.com
      'S3BucketName': sean-react-template-dev
      'S3LoggingBucketName': sean-react-template-dev-logs
    qa:
      'CloudFrontPriceClass': PriceClass_200
      'Domain': sean-react-template-qa.mcquaid-apps.com
      'S3BucketName': sean-react-template-qa
      'S3LoggingBucketName': sean-react-template-qa-logs
    staging:
      'CloudFrontPriceClass': PriceClass_200
      'Domain': sean-react-template-staging.mcquaid-apps.com
      'S3BucketName': sean-react-template-staging
      'S3LoggingBucketName': sean-react-template-staging-logs
    prod:
      'CloudFrontPriceClass': PriceClass_All
      'Domain': sean-react-template.mcquaid-apps.com
      'S3BucketName': sean-react-template-prod
      'S3LoggingBucketName': sean-react-template-prod-logs
Resources:
  # The Amazon S3 bucket into which our Single Page Application build files must be deployed
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [EnvironmentMaps, !Ref Env, 'S3BucketName']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: s3-access-logs
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'

  # The Amazon S3 bucket policy for securing the bucket hosting the application
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CFOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject*'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Bucket
                - /*
      Bucket: !Ref S3Bucket

  # The Amazon S3 bucket into which access logs from S3 (for the application) and CloudFront will be put
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !FindInMap [EnvironmentMaps, !Ref Env, 'S3LoggingBucketName']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
    DeletionPolicy: Delete

  # The Amazon CloudFront origin access identity
  CFOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    DependsOn:
      - S3Bucket
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          !Join [
            '',
            ['Sean React Template (', !Ref Env, ') Origin Access Identity'],
          ]

  # The Amazon WAF WebACL surrounding our CloudFront Distribution
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Description: Web ACL.  Basic AWS Managed Ruleset.
      Name: !FindInMap [EnvironmentMaps, !Ref Env, 'S3BucketName']
      Scope: CLOUDFRONT
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !FindInMap [EnvironmentMaps, !Ref Env, 'S3BucketName']
      Rules:
        - Name: RuleWithAWSManagedRules
          Priority: 0
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RuleWithAWSManagedRulesMetric
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: []

  # The Amazon CloudFront distribution exposing our Single Page Application
  CFDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - CFOriginAccessIdentity
      - WebACL
    Properties:
      DistributionConfig:
        CustomErrorResponses:
          - ErrorCachingMinTTL: 1
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        HttpVersion: 'http2'
        WebACLId: !GetAtt WebACL.Arn
        Aliases:
          - !FindInMap [EnvironmentMaps, !Ref Env, 'Domain']
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        Origins:
          - DomainName: !GetAtt S3Bucket.RegionalDomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CFOriginAccessIdentity}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: myS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        PriceClass:
          !FindInMap [EnvironmentMaps, !Ref Env, 'CloudFrontPriceClass']
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-access-logs'

  # The Amazon Route53 Record with Type A for Aliasing the CloudFront Distribution
  Route53A:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !FindInMap [EnvironmentMaps, !Ref Env, 'Domain']
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CFDistribution.DomainName

  # The Amazon Route53 Record with Type AAAA for Aliasing the CloudFront Distribution
  Route53AAAA:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !FindInMap [EnvironmentMaps, !Ref Env, 'Domain']
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CFDistribution.DomainName

Outputs:
  S3Bucket:
    Value: !Ref S3Bucket
  CFDistribution:
    Value: !Ref CFDistribution
  Route53A:
    Value: !Ref Route53A
  Route53AAAA:
    Value: !Ref Route53AAAA
